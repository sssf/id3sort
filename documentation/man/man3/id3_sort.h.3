.TH "source/id3_sort.h" 3 "Fri Nov 14 2014" "Version 1.0" "ID3 Sort" \" -*- nroff -*-
.ad l
.nh
.SH NAME
source/id3_sort.h \- 
.SH SYNOPSIS
.br
.PP
\fC#include <stdbool\&.h>\fP
.br

.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBMAX_PATH\fP   2048"
.br
.RI "\fImaximum path size, including filename \fP"
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "bool \fBID3_sort_file\fP (char *filename, char *target)"
.br
.RI "\fISort the file according to its ID3 data\&. \fP"
.in -1c
.SH "Macro Definition Documentation"
.PP 
.SS "#define MAX_PATH   2048"

.PP
maximum path size, including filename 
.PP
Definition at line 9 of file id3_sort\&.h\&.
.SH "Function Documentation"
.PP 
.SS "bool ID3_sort_file (char *filename, char *target)"

.PP
Sort the file according to its ID3 data\&. Read the files ID3 data and move it to the following path: 'target/artist/album/title\&.mp3'\&. If no ID3 data for artist could be found artist will be 'unknown' If album is missing, it will be ignored ex: 'target/artist/title\&.mp3' If title is missing, the name of the file being processed will be used instead\&. Target directory must exist\&.
.PP
\fBParameters:\fP
.RS 4
\fI*filename\fP Path to the file being sorted 
.br
\fI*target\fP Path to directory to sort the file into 
.RE
.PP
\fBReturns:\fP
.RS 4
true if file could be sorted, false otherwise 
.RE
.PP

.SH "Author"
.PP 
Generated automatically by Doxygen for ID3 Sort from the source code\&.
